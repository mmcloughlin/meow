// +build ignore

package main

import (
	"crypto/aes"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"
)

const BlockSize = 256

var output = flag.String("out", "block_amd64.s", "output filename")

func main() {
	flag.Parse()
	f, err := os.Create(*output)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	m := NewMeow(f)
	if err := m.Generate(); err != nil {
		log.Fatal(err)
	}
}

// Meow writes an assembly implementation of Meow hash components.
type Meow struct {
	w   io.Writer // where to write assembly output
	err error     // saved error from writing
}

// NewMeow builds a new assembly builder writing to w.
func NewMeow(w io.Writer) *Meow {
	return &Meow{
		w: w,
	}
}

// Generate triggers assembly generation.
func (m *Meow) Generate() error {
	m.header()

	m.text("block", 0, 0)
	m.arg("state_ptr", 0, "DI")
	m.arg("src_ptr", 8, "SI")
	m.arg("src_len", 0, "AX")

	m.section("Load state.")
	for i := 0; i < BlockSize; i += aes.BlockSize {
		m.inst("MOVOU", "%d(STATE_PTR), X%d", i, i/aes.BlockSize)
	}

	m.label("loop")
	m.inst("CMPQ", "SRC_LEN, $%d", BlockSize)
	m.inst("JL", "done")

	m.section("Hash block.")
	for i := 0; i < BlockSize; i += aes.BlockSize {
		m.inst("AESDEC", "%d(SRC_PTR), X%d", i, i/aes.BlockSize)
	}

	m.section("Update source pointer.")
	m.inst("ADDQ", "$%d, SRC_PTR", BlockSize)
	m.inst("SUBQ", "$%d, SRC_LEN", BlockSize)
	m.inst("JMP", "loop")

	m.label("done")
	m.section("Store state.")
	for i := 0; i < BlockSize; i += aes.BlockSize {
		m.inst("MOVOU", "X%d, %d(STATE_PTR)", i/aes.BlockSize, i)
	}

	m.inst("RET", "")

	return m.err
}

// header outputs the file header with code generation warning and standard header includes.
func (m *Meow) header() {
	_, self, _, _ := runtime.Caller(0)
	m.printf("// Code generated by go run %s. DO NOT EDIT.\n\n", filepath.Base(self))
	m.printf("#include \"textflag.h\"\n")
}

// section marks a section of the code with a comment.
func (m *Meow) section(description string) {
	m.printf("\n\t// %s\n", description)
}

// label defines a label.
func (m *Meow) label(name string) {
	m.printf("\n%s:\n", name)
}

// text defines a function header.
func (m *Meow) text(name string, frame, args int) {
	m.printf("\nTEXT \u00b7%s(SB),0,$%d-%d\n", name, frame, args)
}

// alloc informally "allocates" a register with a #define statement.
func (m *Meow) alloc(name, reg string) string {
	macro := strings.ToUpper(name)
	m.printf("#define %s %s\n", macro, reg)
	return macro
}

// arg reads an argument, and allocates a register for it.
func (m *Meow) arg(name string, offset int, reg string) {
	macro := m.alloc(name, reg)
	m.inst("MOVQ", "%s+%d(FP), %s", name, offset, macro)
}

// inst writes an instruction.
func (m *Meow) inst(name, format string, args ...interface{}) {
	args = append([]interface{}{name}, args...)
	m.printf("\t%-8s "+format+"\n", args...)
}
func (m *Meow) printf(format string, args ...interface{}) {
	if _, err := fmt.Fprintf(m.w, format, args...); err != nil {
		m.err = err
	}
}
