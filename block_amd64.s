// Code generated by go run make_block.go. DO NOT EDIT.

#include "textflag.h"

TEXT Â·sum(SB),0,$528-40
#define SEED R8
	MOVQ     seed+0(FP), SEED
#define DST_PTR DI
	MOVQ     dst_ptr+8(FP), DST_PTR
#define SRC_PTR SI
	MOVQ     src_ptr+16(FP), SRC_PTR
#define SRC_LEN AX
	MOVQ     src_len+24(FP), SRC_LEN

	// Prepare IV.
#define IV R9
	MOVQ     SEED, IV
	MOVQ     IV, 512(SP)
	ADDQ     SRC_LEN, IV
	INCQ     IV
	MOVQ     IV, 520(SP)

	// Load IV.
	MOVOU    512(SP), X0
	MOVOU    X0, 0(SP)
	MOVOU    X0, 16(SP)
	MOVOU    X0, 32(SP)
	MOVOU    X0, 48(SP)
	MOVOU    X0, 64(SP)
	MOVOU    X0, 80(SP)
	MOVOU    X0, 96(SP)
	MOVOU    X0, 112(SP)
	MOVOU    X0, 128(SP)
	MOVOU    X0, 144(SP)
	MOVOU    X0, 160(SP)
	MOVOU    X0, 176(SP)
	MOVOU    X0, 192(SP)
	MOVOU    X0, 208(SP)
	MOVOU    X0, 224(SP)
	MOVOU    X0, 240(SP)

loop:
	CMPQ     SRC_LEN, $256
	JL       partial

	// Hash block.
	MOVOU    0(SRC_PTR), X0
	MOVOU    0(SP), X8
	AESDEC   X0, X8
	MOVOU    X8, 0(SP)
	MOVOU    16(SRC_PTR), X1
	MOVOU    16(SP), X9
	AESDEC   X1, X9
	MOVOU    X9, 16(SP)
	MOVOU    32(SRC_PTR), X2
	MOVOU    32(SP), X10
	AESDEC   X2, X10
	MOVOU    X10, 32(SP)
	MOVOU    48(SRC_PTR), X3
	MOVOU    48(SP), X11
	AESDEC   X3, X11
	MOVOU    X11, 48(SP)
	MOVOU    64(SRC_PTR), X4
	MOVOU    64(SP), X12
	AESDEC   X4, X12
	MOVOU    X12, 64(SP)
	MOVOU    80(SRC_PTR), X5
	MOVOU    80(SP), X13
	AESDEC   X5, X13
	MOVOU    X13, 80(SP)
	MOVOU    96(SRC_PTR), X6
	MOVOU    96(SP), X14
	AESDEC   X6, X14
	MOVOU    X14, 96(SP)
	MOVOU    112(SRC_PTR), X7
	MOVOU    112(SP), X15
	AESDEC   X7, X15
	MOVOU    X15, 112(SP)
	MOVOU    128(SRC_PTR), X0
	MOVOU    128(SP), X8
	AESDEC   X0, X8
	MOVOU    X8, 128(SP)
	MOVOU    144(SRC_PTR), X1
	MOVOU    144(SP), X9
	AESDEC   X1, X9
	MOVOU    X9, 144(SP)
	MOVOU    160(SRC_PTR), X2
	MOVOU    160(SP), X10
	AESDEC   X2, X10
	MOVOU    X10, 160(SP)
	MOVOU    176(SRC_PTR), X3
	MOVOU    176(SP), X11
	AESDEC   X3, X11
	MOVOU    X11, 176(SP)
	MOVOU    192(SRC_PTR), X4
	MOVOU    192(SP), X12
	AESDEC   X4, X12
	MOVOU    X12, 192(SP)
	MOVOU    208(SRC_PTR), X5
	MOVOU    208(SP), X13
	AESDEC   X5, X13
	MOVOU    X13, 208(SP)
	MOVOU    224(SRC_PTR), X6
	MOVOU    224(SP), X14
	AESDEC   X6, X14
	MOVOU    X14, 224(SP)
	MOVOU    240(SRC_PTR), X7
	MOVOU    240(SP), X15
	AESDEC   X7, X15
	MOVOU    X15, 240(SP)

	// Update source pointer.
	ADDQ     $256, SRC_PTR
	SUBQ     $256, SRC_LEN
	JMP      loop

partial:
	CMPQ     SRC_LEN, $0
	JE       finish

	// Load IV into partial block.
	MOVOU    512(SP), X0
	MOVOU    X0, 256(SP)
	MOVOU    X0, 272(SP)
	MOVOU    X0, 288(SP)
	MOVOU    X0, 304(SP)
	MOVOU    X0, 320(SP)
	MOVOU    X0, 336(SP)
	MOVOU    X0, 352(SP)
	MOVOU    X0, 368(SP)
	MOVOU    X0, 384(SP)
	MOVOU    X0, 400(SP)
	MOVOU    X0, 416(SP)
	MOVOU    X0, 432(SP)
	MOVOU    X0, 448(SP)
	MOVOU    X0, 464(SP)
	MOVOU    X0, 480(SP)
	MOVOU    X0, 496(SP)
#define BLOCK_PTR BX
	LEAQ     256(SP), BLOCK_PTR

byteloop:
	MOVB     (SRC_PTR), R10
	MOVB     R10, (BLOCK_PTR)
	INCQ     SRC_PTR
	INCQ     BLOCK_PTR
	DECQ     SRC_LEN
	JNE      byteloop
	MOVOU    0(SP), X0
	MOVOU    256(SP), X8
	AESDEC   X8, X0
	MOVOU    X0, 0(SP)
	MOVOU    16(SP), X1
	MOVOU    272(SP), X9
	AESDEC   X9, X1
	MOVOU    X1, 16(SP)
	MOVOU    32(SP), X2
	MOVOU    288(SP), X10
	AESDEC   X10, X2
	MOVOU    X2, 32(SP)
	MOVOU    48(SP), X3
	MOVOU    304(SP), X11
	AESDEC   X11, X3
	MOVOU    X3, 48(SP)
	MOVOU    64(SP), X4
	MOVOU    320(SP), X12
	AESDEC   X12, X4
	MOVOU    X4, 64(SP)
	MOVOU    80(SP), X5
	MOVOU    336(SP), X13
	AESDEC   X13, X5
	MOVOU    X5, 80(SP)
	MOVOU    96(SP), X6
	MOVOU    352(SP), X14
	AESDEC   X14, X6
	MOVOU    X6, 96(SP)
	MOVOU    112(SP), X7
	MOVOU    368(SP), X15
	AESDEC   X15, X7
	MOVOU    X7, 112(SP)
	MOVOU    128(SP), X0
	MOVOU    384(SP), X8
	AESDEC   X8, X0
	MOVOU    X0, 128(SP)
	MOVOU    144(SP), X1
	MOVOU    400(SP), X9
	AESDEC   X9, X1
	MOVOU    X1, 144(SP)
	MOVOU    160(SP), X2
	MOVOU    416(SP), X10
	AESDEC   X10, X2
	MOVOU    X2, 160(SP)
	MOVOU    176(SP), X3
	MOVOU    432(SP), X11
	AESDEC   X11, X3
	MOVOU    X3, 176(SP)
	MOVOU    192(SP), X4
	MOVOU    448(SP), X12
	AESDEC   X12, X4
	MOVOU    X4, 192(SP)
	MOVOU    208(SP), X5
	MOVOU    464(SP), X13
	AESDEC   X13, X5
	MOVOU    X5, 208(SP)
	MOVOU    224(SP), X6
	MOVOU    480(SP), X14
	AESDEC   X14, X6
	MOVOU    X6, 224(SP)
	MOVOU    240(SP), X7
	MOVOU    496(SP), X15
	AESDEC   X15, X7
	MOVOU    X7, 240(SP)

finish:

	// Load IV into R0.
	MOVOU    512(SP), X0
	MOVOU    512(SP), X1
	MOVOU    512(SP), X2
	MOVOU    512(SP), X3

	// Rotation block 0.
	MOVOU    0(SP), X8
	AESDEC   X8, X0
	MOVOU    16(SP), X9
	AESDEC   X9, X1
	MOVOU    32(SP), X10
	AESDEC   X10, X2
	MOVOU    48(SP), X11
	AESDEC   X11, X3
	MOVOU    64(SP), X8
	AESDEC   X8, X0
	MOVOU    80(SP), X9
	AESDEC   X9, X1
	MOVOU    96(SP), X10
	AESDEC   X10, X2
	MOVOU    112(SP), X11
	AESDEC   X11, X3
	MOVOU    128(SP), X8
	AESDEC   X8, X0
	MOVOU    144(SP), X9
	AESDEC   X9, X1
	MOVOU    160(SP), X10
	AESDEC   X10, X2
	MOVOU    176(SP), X11
	AESDEC   X11, X3
	MOVOU    192(SP), X8
	AESDEC   X8, X0
	MOVOU    208(SP), X9
	AESDEC   X9, X1
	MOVOU    224(SP), X10
	AESDEC   X10, X2
	MOVOU    240(SP), X11
	AESDEC   X11, X3

	// Rotation block 1.
	MOVOU    16(SP), X8
	AESDEC   X8, X0
	MOVOU    32(SP), X9
	AESDEC   X9, X1
	MOVOU    48(SP), X10
	AESDEC   X10, X2
	MOVOU    0(SP), X11
	AESDEC   X11, X3
	MOVOU    80(SP), X8
	AESDEC   X8, X0
	MOVOU    96(SP), X9
	AESDEC   X9, X1
	MOVOU    112(SP), X10
	AESDEC   X10, X2
	MOVOU    64(SP), X11
	AESDEC   X11, X3
	MOVOU    144(SP), X8
	AESDEC   X8, X0
	MOVOU    160(SP), X9
	AESDEC   X9, X1
	MOVOU    176(SP), X10
	AESDEC   X10, X2
	MOVOU    128(SP), X11
	AESDEC   X11, X3
	MOVOU    208(SP), X8
	AESDEC   X8, X0
	MOVOU    224(SP), X9
	AESDEC   X9, X1
	MOVOU    240(SP), X10
	AESDEC   X10, X2
	MOVOU    192(SP), X11
	AESDEC   X11, X3

	// Rotation block 2.
	MOVOU    32(SP), X8
	AESDEC   X8, X0
	MOVOU    48(SP), X9
	AESDEC   X9, X1
	MOVOU    0(SP), X10
	AESDEC   X10, X2
	MOVOU    16(SP), X11
	AESDEC   X11, X3
	MOVOU    96(SP), X8
	AESDEC   X8, X0
	MOVOU    112(SP), X9
	AESDEC   X9, X1
	MOVOU    64(SP), X10
	AESDEC   X10, X2
	MOVOU    80(SP), X11
	AESDEC   X11, X3
	MOVOU    160(SP), X8
	AESDEC   X8, X0
	MOVOU    176(SP), X9
	AESDEC   X9, X1
	MOVOU    128(SP), X10
	AESDEC   X10, X2
	MOVOU    144(SP), X11
	AESDEC   X11, X3
	MOVOU    224(SP), X8
	AESDEC   X8, X0
	MOVOU    240(SP), X9
	AESDEC   X9, X1
	MOVOU    192(SP), X10
	AESDEC   X10, X2
	MOVOU    208(SP), X11
	AESDEC   X11, X3

	// Rotation block 3.
	MOVOU    48(SP), X8
	AESDEC   X8, X0
	MOVOU    0(SP), X9
	AESDEC   X9, X1
	MOVOU    16(SP), X10
	AESDEC   X10, X2
	MOVOU    32(SP), X11
	AESDEC   X11, X3
	MOVOU    112(SP), X8
	AESDEC   X8, X0
	MOVOU    64(SP), X9
	AESDEC   X9, X1
	MOVOU    80(SP), X10
	AESDEC   X10, X2
	MOVOU    96(SP), X11
	AESDEC   X11, X3
	MOVOU    176(SP), X8
	AESDEC   X8, X0
	MOVOU    128(SP), X9
	AESDEC   X9, X1
	MOVOU    144(SP), X10
	AESDEC   X10, X2
	MOVOU    160(SP), X11
	AESDEC   X11, X3
	MOVOU    240(SP), X8
	AESDEC   X8, X0
	MOVOU    192(SP), X9
	AESDEC   X9, X1
	MOVOU    208(SP), X10
	AESDEC   X10, X2
	MOVOU    224(SP), X11
	AESDEC   X11, X3

	// Final merge.
	MOVOU    512(SP), X8
	AESDEC   X8, X0
	AESDEC   X8, X1
	AESDEC   X8, X2
	AESDEC   X8, X3
	AESDEC   X8, X0
	AESDEC   X8, X1
	AESDEC   X8, X2
	AESDEC   X8, X3
	AESDEC   X8, X0
	AESDEC   X8, X1
	AESDEC   X8, X2
	AESDEC   X8, X3
	AESDEC   X8, X0
	AESDEC   X8, X1
	AESDEC   X8, X2
	AESDEC   X8, X3
	AESDEC   X8, X0
	AESDEC   X8, X1
	AESDEC   X8, X2
	AESDEC   X8, X3

	// Store hash.
	MOVOU    X0, 0(DST_PTR)
	MOVOU    X1, 16(DST_PTR)
	MOVOU    X2, 32(DST_PTR)
	MOVOU    X3, 48(DST_PTR)
	RET      
