// Code generated by go run make_block.go. DO NOT EDIT.

#include "textflag.h"

TEXT Â·sum(SB),0,$128-40
#define SEED R8
	MOVQ     seed+0(FP), SEED
#define DST_PTR DI
	MOVQ     dst_ptr+8(FP), DST_PTR
#define SRC_PTR SI
	MOVQ     src_ptr+16(FP), SRC_PTR
#define SRC_LEN AX
	MOVQ     src_len+24(FP), SRC_LEN

	// Prepare IV.
#define IV R9
	MOVQ     SEED, IV
	MOVQ     IV, 0(SP)
	MOVQ     IV, 8(SP)
	ADDQ     SRC_LEN, IV
	INCQ     IV
	MOVQ     IV, 16(SP)
	MOVQ     IV, 24(SP)

	// Load IV.
	MOVOU    0(SP), X0
	MOVOU    0(SP), X1
	MOVOU    16(SP), X2
	MOVOU    16(SP), X3
	MOVOU    0(SP), X4
	MOVOU    0(SP), X5
	MOVOU    16(SP), X6
	MOVOU    16(SP), X7
	MOVOU    0(SP), X8
	MOVOU    0(SP), X9
	MOVOU    16(SP), X10
	MOVOU    16(SP), X11
	MOVOU    0(SP), X12
	MOVOU    0(SP), X13
	MOVOU    16(SP), X14
	MOVOU    16(SP), X15

loop:
	CMPQ     SRC_LEN, $256
	JL       residual

	// Hash block.
	AESDEC   0(SRC_PTR), X0
	AESDEC   16(SRC_PTR), X1
	AESDEC   32(SRC_PTR), X2
	AESDEC   48(SRC_PTR), X3
	AESDEC   64(SRC_PTR), X4
	AESDEC   80(SRC_PTR), X5
	AESDEC   96(SRC_PTR), X6
	AESDEC   112(SRC_PTR), X7
	AESDEC   128(SRC_PTR), X8
	AESDEC   144(SRC_PTR), X9
	AESDEC   160(SRC_PTR), X10
	AESDEC   176(SRC_PTR), X11
	AESDEC   192(SRC_PTR), X12
	AESDEC   208(SRC_PTR), X13
	AESDEC   224(SRC_PTR), X14
	AESDEC   240(SRC_PTR), X15

	// Update source pointer.
	ADDQ     $256, SRC_PTR
	SUBQ     $256, SRC_LEN
	JMP      loop

residual:

finish:
	MOVOU    X0, 32(SP)
	MOVOU    X1, 48(SP)
	MOVOU    X2, 64(SP)
	MOVOU    X3, 80(SP)
	MOVOU    0(SP), X0
	MOVOU    0(SP), X1
	MOVOU    16(SP), X2
	MOVOU    16(SP), X3

	// Rotation block 0.
	AESDEC   32(SP), X0
	AESDEC   48(SP), X1
	AESDEC   64(SP), X2
	AESDEC   80(SP), X3
	AESDEC   X4, X0
	AESDEC   X5, X1
	AESDEC   X6, X2
	AESDEC   X7, X3
	AESDEC   X8, X0
	AESDEC   X9, X1
	AESDEC   X10, X2
	AESDEC   X11, X3
	AESDEC   X12, X0
	AESDEC   X13, X1
	AESDEC   X14, X2
	AESDEC   X15, X3

	// Rotation block 1.
	AESDEC   48(SP), X0
	AESDEC   64(SP), X1
	AESDEC   80(SP), X2
	AESDEC   32(SP), X3
	AESDEC   X5, X0
	AESDEC   X6, X1
	AESDEC   X7, X2
	AESDEC   X4, X3
	AESDEC   X9, X0
	AESDEC   X10, X1
	AESDEC   X11, X2
	AESDEC   X8, X3
	AESDEC   X13, X0
	AESDEC   X14, X1
	AESDEC   X15, X2
	AESDEC   X12, X3

	// Rotation block 2.
	AESDEC   64(SP), X0
	AESDEC   80(SP), X1
	AESDEC   32(SP), X2
	AESDEC   48(SP), X3
	AESDEC   X6, X0
	AESDEC   X7, X1
	AESDEC   X4, X2
	AESDEC   X5, X3
	AESDEC   X10, X0
	AESDEC   X11, X1
	AESDEC   X8, X2
	AESDEC   X9, X3
	AESDEC   X14, X0
	AESDEC   X15, X1
	AESDEC   X12, X2
	AESDEC   X13, X3

	// Rotation block 3.
	AESDEC   80(SP), X0
	AESDEC   32(SP), X1
	AESDEC   48(SP), X2
	AESDEC   64(SP), X3
	AESDEC   X7, X0
	AESDEC   X4, X1
	AESDEC   X5, X2
	AESDEC   X6, X3
	AESDEC   X11, X0
	AESDEC   X8, X1
	AESDEC   X9, X2
	AESDEC   X10, X3
	AESDEC   X15, X0
	AESDEC   X12, X1
	AESDEC   X13, X2
	AESDEC   X14, X3

	// Final merge.
	AESDEC   0(SP), X0
	AESDEC   0(SP), X1
	AESDEC   16(SP), X2
	AESDEC   16(SP), X3
	AESDEC   0(SP), X0
	AESDEC   0(SP), X1
	AESDEC   16(SP), X2
	AESDEC   16(SP), X3
	AESDEC   0(SP), X0
	AESDEC   0(SP), X1
	AESDEC   16(SP), X2
	AESDEC   16(SP), X3
	AESDEC   0(SP), X0
	AESDEC   0(SP), X1
	AESDEC   16(SP), X2
	AESDEC   16(SP), X3
	AESDEC   0(SP), X0
	AESDEC   0(SP), X1
	AESDEC   16(SP), X2
	AESDEC   16(SP), X3

	// Store hash.
	MOVOU    X0, 0(DST_PTR)
	MOVOU    X1, 16(DST_PTR)
	MOVOU    X2, 32(DST_PTR)
	MOVOU    X3, 48(DST_PTR)
	RET      
